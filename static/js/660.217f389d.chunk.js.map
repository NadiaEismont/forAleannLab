{"version":3,"file":"static/js/660.217f389d.chunk.js","mappings":"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","sources":["components/GoogleMap.jsx","pages/DetailedJob.jsx","hooks/useFetchJob.js","../node_modules/nanoid/index.browser.js","service/jobsApi.js","utils/utils.js"],"sourcesContent":["const GoogleMap = ({ location }) => {\n  const { lat, long } = location;\n  return (\n    <img\n      alt=\"\"\n      src={`https://maps.googleapis.com/maps/api/staticmap?center=${lat},${long}&zoom=13&size=402x218&\nmarkers=color:0xD8D8D8%7Clabel:S&key=AIzaSyASTZHvfmoSHr9CPVXcCYQLQSeuzyRLEEc`}\n    />\n  );\n};\n\nexport default GoogleMap;\n","import { Link } from 'react-router-dom';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { Section } from 'components';\nimport { useFetchJob } from 'hooks/useFetchJob';\nimport timeSince from 'utils/utils';\nimport GoogleMap from 'components/GoogleMap';\n\nimport { BsBookmark } from 'react-icons/bs';\nimport { BsFillShareFill, BsBookmarkFill } from 'react-icons/bs';\nimport { MdLocationPin, MdKeyboardArrowLeft } from 'react-icons/md';\nimport { nanoid } from 'nanoid';\n\nconst DetailedJob = ({ savedJobs, jobs, onJobSave, onJobDelete }) => {\n  const { jobId } = useParams();\n  const { job } = useFetchJob(jobId);\n\n  const page = useLocation();\n\n  return (\n    <>\n      {job && (\n        <Section className=\"max-w-7xl m-auto\">\n          <div className=\"flex\">\n            <div className=\"w-3/5 mr-24\">\n              <header className=\"border-b\">\n                <div className=\"flex justify-between \">\n                  <Link\n                    to={'/'}\n                    state={{ from: page }}\n                    className=\"cursor-pointer text-[#3A4562] font-bold text-3xl \"\n                  >\n                    Job Details\n                  </Link>\n                  <div className=\"flex items-baseline\">\n                    {/* <BsBookmark className=\"text-2xl mx-4 text-[#3A4562] hover:scale-125 \" />\n                    <button\n                      className=\"leading-7 font-normal text-lg mr-6 text-[#3A4562]\"\n                      type=\"button\"\n                    >\n                      Save to my list\n                    </button> */}\n                    <button\n                      className=\"leading-7 font-normal text-lg mr-6 text-[#3A4562]\"\n                      onClick={\n                        savedJobs.some(j => j.id === jobId)\n                          ? () => onJobDelete(jobId)\n                          : () => onJobSave(job)\n                      }\n                    >\n                      {savedJobs.some(j => j.id === jobId) ? (\n                        <BsBookmarkFill className=\"text-2xl mx-4 text-[#3A4562] hover:scale-125 \" />\n                      ) : (\n                        <BsBookmark className=\"text-2xl mx-4 text-[#3A4562] hover:scale-125 \" />\n                      )}\n                    </button>\n\n                    <BsFillShareFill className=\"text-2xl mx-4 text-[#3A4562] hover:scale-125 \" />\n                    <button\n                      className=\"font-normal text-lg text-[#3A4562]\"\n                      type=\"button\"\n                    >\n                      Share\n                    </button>\n                  </div>\n                </div>\n              </header>\n              <div>\n                <div className=\"text-[#3A4562]\">\n                  <button\n                    type=\"button\"\n                    className=\"w-[127px] h-[58px] bg-[#2A3047] rounded-lg text-white font-semibold text-xs uppercase mt-10 mb-9  hover:bg-[#55699e]/50\"\n                  >\n                    Apply now\n                  </button>\n                  <div className=\"flex justify-between\">\n                    <h1 className=\"w-[501] h-auto font-bold text-2xl mb-2 mr-14 \">\n                      {job.title}\n                    </h1>\n                    <p className=\"font-bold text-2xl min-w-[161px]\">\n                      {job.salary}\n                      <br />\n                      <span className=\"font-normal text-lg\">\n                        Brutto, per year\n                      </span>\n                    </p>\n                  </div>\n                  <p className=\"text-slate-400\">\n                    Posted &nbsp;\n                    {timeSince(Date.parse(job.createdAt))} ago\n                  </p>\n                  <p>{job.description}</p>\n                  <button\n                    type=\"button\"\n                    className=\"w-[127px] h-[58px] bg-[#2A3047] rounded-lg text-white font-semibold text-xs uppercase mt-10 mb-9  hover:bg-[#55699e]/50\"\n                  >\n                    Apply now\n                  </button>\n                </div>\n                <div className=\"text-[#3A4562]\">\n                  <h2 className=\"font-bold text-3xl border-b mb-3.5\">\n                    Additional info\n                  </h2>\n                  <p className=\"text-lg font-normal mb-3\">Employment type</p>\n                  <ul className=\"flex justify-start\">\n                    {job.employment_type.map(e => (\n                      <li\n                        key={e}\n                        className=\"leading-[49px] w-[222px] h-[49px] mr-2 border border-[#55699e] bg-[#55699e]/30 mb-6 text-[#55699E] font-bold text-base rounded-lg text-center\"\n                      >\n                        {e}\n                      </li>\n                    ))}\n                  </ul>\n                  <p className=\"text-lg font-normal mb-3\">Benefits</p>\n                  <ul className=\"flex justify-start\">\n                    {job.benefits.map(e => (\n                      <li\n                        key={e}\n                        className=\"flex justify-center items-center mb-20 mr-2 w-[220px] h-[49px] border border-[#FFCF00] bg-[#FFCF00]/30 text-[#988B49] font-bold text-base rounded-lg text-center\"\n                      >\n                        {e}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div>\n                  <h2 className=\"font-bold text-3xl text-[#3A4562] border-b mb-4\">\n                    Attached images\n                  </h2>\n                  <div className=\"flex justify-start mb-20\">\n                    {job.pictures.map(e => (\n                      <img\n                        key={nanoid()}\n                        className=\"mr-2 w-[200px] h-[103px] rounded-lg\"\n                        src={`${e}?random=${Math.floor(\n                          Math.random() * 100000,\n                        )}`}\n                        alt=\"\"\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <Link to=\"/\">\n                <button\n                  className=\"w-[213px] h-[50px] bg-[#e4e5ea] rounded-lg font-semibold text-xs font-semibold hover:bg-gray-300\"\n                  type=\"button\"\n                >\n                  <MdKeyboardArrowLeft className=\"inline mr-1  text-4xl font-thin\" />\n                  RETURN TO JOB BOARD\n                </button>\n              </Link>\n            </div>\n            <div className=\"flex flex-col justify-between relative z-30 w-[402px] max-h-[436px] bg-[#2A3047] overflow-hidden  text-[#E8EBF3]\">\n              <div className=\"absolute -translate-x-1/4  bg-[#202336] rounded-full w-80 h-80  -z-10\"></div>\n              <div className=\"px-16 pt-8 pb-4\">\n                <h2 className=\"z-10 font-bold text-xl mb-2\">{job.name}</h2>\n\n                <p className=\"z-10 font-normal text-lg \">\n                  <MdLocationPin className=\"inline mr-1 fill-[#D8D8D8] text-2xl\" />\n                  {job.address}\n                </p>\n                <p className=\"z-10 font-normal text-lg\">{job.phone}</p>\n                <p className=\"z-10 font-normal text-lg\">{job.email}</p>\n              </div>\n              <div className=\"flex-none\">\n                <MdLocationPin className=\"absolute inset-y-80 inset-x-32 text-4xl\" />\n                <GoogleMap location={job.location} />\n              </div>\n            </div>\n          </div>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default DetailedJob;\n","import { useEffect, useState } from 'react';\nimport { getListOfJobs } from 'service/jobsApi';\n\n\nexport const useFetchJob = (jobId) => {\n    const [job, setJobs] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsloading] = useState(false);\n\n    useEffect(() => {\n        setIsloading(true);\n\n        const fetchData = async () => {\n            try {\n                const data = await getListOfJobs();\n                setJobs(data.find(job => job.id === jobId));\n            } catch (error) {\n                console.error(error);\n                setError(error.message);\n            } finally {\n                setIsloading(false);\n            }\n        };\n\n        fetchData();\n    }, [jobId]);\n\n    return { job, error, isLoading };\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\n\naxios.defaults.baseURL = 'https://api.json-generator.com/templates/ZM1r0eic3XEy/data?access_token=wm3gg940gy0xek1ld98uaizhz83c6rh2sir9f9fu';\n\nexport const getListOfJobs = async () => {\n  const { data } = await axios.get('');\n  return data;\n};\n\n\n\n\n\n\n// const jobsReducer = (state = [], action) => {\n//   switch (action.type) {\n//     case 'SET_JOBS':\n//       return action.jobs;\n//     case 'LOAD_MORE_JOBS':\n//       return [...state, ...action.jobs];\n//     default:\n//       return state;\n//   }\n// };\n// export default jobsReducer;","var timeSince = function (date) {\n    if (typeof date !== 'object') {\n        date = new Date(date);\n    }\n\n    var seconds = Math.floor((new Date() - date) / 1000);\n    var intervalType;\n\n    var interval = Math.floor(seconds / 31536000);\n    if (interval >= 1) {\n        intervalType = 'year';\n    } else {\n        interval = Math.floor(seconds / 2592000);\n        if (interval >= 1) {\n            intervalType = 'month';\n        } else {\n            interval = Math.floor(seconds / 86400);\n            if (interval >= 1) {\n                intervalType = 'day';\n            } else {\n                interval = Math.floor(seconds / 3600);\n                if (interval >= 1) {\n                    intervalType = \"hour\";\n                } else {\n                    interval = Math.floor(seconds / 60);\n                    if (interval >= 1) {\n                        intervalType = \"minute\";\n                    } else {\n                        interval = seconds;\n                        intervalType = \"second\";\n                    }\n                }\n            }\n        }\n    }\n\n    if (interval > 1 || interval === 0) {\n        intervalType += 's';\n    }\n\n    return interval + ' ' + intervalType;\n};\n\nexport default timeSince;"],"names":["location","lat","long","alt","src","savedJobs","onJobSave","jobs","onJobDelete","jobId","useParams","useState","job","setJobs","error","setError","isLoading","setIsloading","useEffect","fetchData","getListOfJobs","data","find","id","console","message","useFetchJob","page","useLocation","className","to","state","from","onClick","some","j","type","title","salary","timeSince","Date","parse","createdAt","description","employment_type","map","e","benefits","pictures","Math","floor","random","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","name","address","phone","email","axios","date","intervalType","seconds","interval"],"sourceRoot":""}